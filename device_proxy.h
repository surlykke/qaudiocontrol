/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p device_proxy -c DeviceProxy -i dbus_types.h org.PulseAudio.Core1.Device.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DEVICE_PROXY_H_1396781537
#define DEVICE_PROXY_H_1396781537

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbus_types.h"

/*
 * Proxy class for interface org.PulseAudio.Core1.Device
 */
class DeviceProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.PulseAudio.Core1.Device"; }

public:
    DeviceProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DeviceProxy();

    Q_PROPERTY(QDBusObjectPath ActivePort READ activePort WRITE setActivePort)
    inline QDBusObjectPath activePort() const
    { return qvariant_cast< QDBusObjectPath >(property("ActivePort")); }
    inline void setActivePort(const QDBusObjectPath &value)
    { setProperty("ActivePort", QVariant::fromValue(value)); }

    Q_PROPERTY(uint BaseVolume READ baseVolume)
    inline uint baseVolume() const
    { return qvariant_cast< uint >(property("BaseVolume")); }

    Q_PROPERTY(QDBusObjectPath Card READ card)
    inline QDBusObjectPath card() const
    { return qvariant_cast< QDBusObjectPath >(property("Card")); }

    Q_PROPERTY(DBusUIntList Channels READ channels)
    inline DBusUIntList channels() const
    { return qvariant_cast< DBusUIntList >(property("Channels")); }

    Q_PROPERTY(qulonglong ConfiguredLatency READ configuredLatency)
    inline qulonglong configuredLatency() const
    { return qvariant_cast< qulonglong >(property("ConfiguredLatency")); }

    Q_PROPERTY(QString Driver READ driver)
    inline QString driver() const
    { return qvariant_cast< QString >(property("Driver")); }

    Q_PROPERTY(bool HasConvertibleToDecibelVolume READ hasConvertibleToDecibelVolume)
    inline bool hasConvertibleToDecibelVolume() const
    { return qvariant_cast< bool >(property("HasConvertibleToDecibelVolume")); }

    Q_PROPERTY(bool HasDynamicLatency READ hasDynamicLatency)
    inline bool hasDynamicLatency() const
    { return qvariant_cast< bool >(property("HasDynamicLatency")); }

    Q_PROPERTY(bool HasFlatVolume READ hasFlatVolume)
    inline bool hasFlatVolume() const
    { return qvariant_cast< bool >(property("HasFlatVolume")); }

    Q_PROPERTY(bool HasHardwareMute READ hasHardwareMute)
    inline bool hasHardwareMute() const
    { return qvariant_cast< bool >(property("HasHardwareMute")); }

    Q_PROPERTY(bool HasHardwareVolume READ hasHardwareVolume)
    inline bool hasHardwareVolume() const
    { return qvariant_cast< bool >(property("HasHardwareVolume")); }

    Q_PROPERTY(uint Index READ index)
    inline uint index() const
    { return qvariant_cast< uint >(property("Index")); }

    Q_PROPERTY(bool IsHardwareDevice READ isHardwareDevice)
    inline bool isHardwareDevice() const
    { return qvariant_cast< bool >(property("IsHardwareDevice")); }

    Q_PROPERTY(bool IsNetworkDevice READ isNetworkDevice)
    inline bool isNetworkDevice() const
    { return qvariant_cast< bool >(property("IsNetworkDevice")); }

    Q_PROPERTY(qulonglong Latency READ latency)
    inline qulonglong latency() const
    { return qvariant_cast< qulonglong >(property("Latency")); }

    Q_PROPERTY(bool Mute READ mute WRITE setMute)
    inline bool mute() const
    { return qvariant_cast< bool >(property("Mute")); }
    inline void setMute(bool value)
    { setProperty("Mute", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(QDBusObjectPath OwnerModule READ ownerModule)
    inline QDBusObjectPath ownerModule() const
    { return qvariant_cast< QDBusObjectPath >(property("OwnerModule")); }

    Q_PROPERTY(QList<QDBusObjectPath> Ports READ ports)
    inline QList<QDBusObjectPath> ports() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Ports")); }

    Q_PROPERTY(DBusPropertyList PropertyList READ propertyList)
    inline DBusPropertyList propertyList() const
    { return qvariant_cast< DBusPropertyList >(property("PropertyList")); }

    Q_PROPERTY(uint SampleFormat READ sampleFormat)
    inline uint sampleFormat() const
    { return qvariant_cast< uint >(property("SampleFormat")); }

    Q_PROPERTY(uint SampleRate READ sampleRate)
    inline uint sampleRate() const
    { return qvariant_cast< uint >(property("SampleRate")); }

    Q_PROPERTY(uint State READ state)
    inline uint state() const
    { return qvariant_cast< uint >(property("State")); }

    Q_PROPERTY(DBusUIntList Volume READ volume WRITE setVolume)
    inline DBusUIntList volume() const
    { return qvariant_cast< DBusUIntList >(property("Volume")); }
    inline void setVolume(DBusUIntList value)
    { setProperty("Volume", QVariant::fromValue(value)); }

    Q_PROPERTY(uint VolumeSteps READ volumeSteps)
    inline uint volumeSteps() const
    { return qvariant_cast< uint >(property("VolumeSteps")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> GetPortByName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetPortByName"), argumentList);
    }

    inline QDBusPendingReply<> Suspend(bool suspend)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(suspend);
        return asyncCallWithArgumentList(QLatin1String("Suspend"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActivePortUpdated(const QDBusObjectPath &port);
    void MuteUpdated(bool muted);
    void PropertyListUpdated(DBusPropertyList property_list);
    void StateUpdated(uint state);
    void VolumeUpdated(DBusUIntList volume);
};

namespace org {
  namespace PulseAudio {
    namespace Core1 {
      typedef ::DeviceProxy Device;
    }
  }
}
#endif
